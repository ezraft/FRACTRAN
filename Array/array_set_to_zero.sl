
# input array: [15, 12, 11]
# rework of the stack to support 4-bit values (in theory this could change but will be similar)
# note: should only be run with fast interpreter
# program function: set the k-th element (0-indexed) of the array to 0, without changing the elements
# specification: the array will be stored in register 2
# the index to access will be stored in register 5
# the new array will be stored in register 2

# first, get the kth element of the array

# copy array from 2 into 7 and 11 [1 line]
77/2 1,1/1 2

# swap 11 into 2, placing array back in its place [1 line]
2/11 2,1/1 3

# pop k times [4 lines]
13/5 4,1/1 7
# this is 11/7**16, i.e. bitshift right by 4
11/33232930569601 4,1/1 5
1/7 5,1/1 6
7/11 6,1/1 3

# pop and place result in register 3 [4 lines]
1/33232930569601 7,1/1 8
6561/5764801 9,1/1 9
81/2401 10,1/1 10
9/49 11,1/1 11
3/7 12,1/1 12

# clear register 7 [1 line]
1/7 12,1/1 13

# now compute 2^4k

# multiply k (register 13) by 4
83521/13 13,1/1 14
13/17 14,1/1 15
# place 1 in 5 and 7 [1 line]
35/1 16
# "while" k > 0, add 7 to 5, copy 5 into 7 and 11, then swap 11 into 5, multiplying 5 by 2
1/13 17,1/1 20
5/7 17,1/1 18
77/5 18,1/1 19
5/11 19,1/1 16
1/7 20,1/1 21

# finally, multiply the value obtained from the array by 2^4k (as computed)
# then subtract this value from the array, setting the element at this index to 0
1/3 22,1/1 24
77/5 22,1/1 23
5/11 23,1/1 21

# last step: subtract 7 from 2
1/14 24,1/1 25
1/5 25